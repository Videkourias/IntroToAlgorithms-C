Script started on Wed 06 Feb 2019 04:24:22 PM EST
]0;willavod@ltsp-amd64-alpha: ~/cs141/assignment1[01;32mwillavod@ltsp-amd64-alpha[00m:[01;34m~/cs141/assignment1[00m$ cat assign1.c
/*
Author: Dean Willavoys
ID: 105003751
Date: 1/29/19
Purpose: To create and test various 2d array manipulating functions
*/


#include<stdio.h>
#include<stdlib.h>
#include<time.h>

#define COL 20
#define ROW 20



/*
LinearSearch: Uses exhaustive method to find if integer key is in passed array
Input: An integer array, a size for that array, a key to search for
Output: An integer 0 for success(found), 1 for failure(not found)
*/
int LinearSearch(int array[], int size, int key);
int LinearSearch(int array[], int size, int key){
	int i; //Iterator for for loop

	for(i = 0; i < size; i++){
		if(array[i] == key) return 0; //Case for key found in array
	}
	return 1; //Case for key not found
}



/*
PopulateArray2DUnique: Populates the 2D Array of size rowsize x colsize with unique random integers ranging between min and max inclusive.
Input: A 2d integer array, 2 positive integers for row size and column size of that array, and 2 integers for the minimum random value and the maximum random value respectively
Output: Doesn't print or return, changes the values of the passed array
*/
void PopulateArray2DUnique(int A[][COL], unsigned int rowsize, unsigned int colsize, int min, int max);
void PopulateArray2DUnique(int A[][COL], unsigned int rowsize, unsigned int colsize, int min, int max){
	int i; //Iterators for for loops
	int j;	
	srand(time(NULL)); //Seeds randint based on current time
	int used[rowsize * colsize]; //A 1d array keeping track of used values
	int index = 0; //Current index in used array
	int num; //Random number



	for(i = 0; i < rowsize * colsize; i++){
		used[i] = min - 1; //Populates array with integers that won't be generated later
	}



	for(i = 0; i < rowsize; i++){ //Loops through rows
		for(j = 0; j < colsize; j++){ //Loops through columns
			num =  min + (rand() % (max - min + 1)); //Chooses random number
			if(LinearSearch(used, rowsize * colsize, num)){ //Case for number not having been used before
				A[i][j] = num; //Assigns current element in A to that num
				used[index] = num; //Adds num to the used num array
				index++; //Moves to the next element of the used array
			}
			else{ //Number seen before
				j--; //In case num is invalid/ not unique, element is not skipped
			}
		}
	}
}



/*
DisplayArray2D: Display the contents of a 2d array of size rowsize x colsize in a table format; that is each line will display one row where the numbers are separated by a single space character.
Input: A 2d integer array, 2 unsigned integers that represent the row and column size of that same 2d integer
Output: Prints the 2d array in tabular format
*/
void DisplayArray2D(int A[][COL], unsigned int rowsize, unsigned int colsize);
void DisplayArray2D(int A[][COL], unsigned int rowsize, unsigned int colsize){
	int i; //Iterators for for loops
	int j;
	for(i = 0; i < rowsize; i++){ //Loops through rows
		for(j = 0; j < colsize; j++){ //Loops through columns
			printf("%d ", A[i][j]); //Prints element i,j of the entered array
		}
		printf("\n"); //New line for new row
	}
}



/*
FindLargest: Given a 2d array A of rowsize x colsize, return the largest integer number it contains
Input: A 2d integer array, 2 unsigned integers that represent the row and column size of that same 2d array
Output: Returns the largest element in the array
*/
int FindLargest(int A[][COL], unsigned int rowsize, unsigned int colsize);
int FindLargest(int A[][COL], unsigned int rowsize, unsigned int colsize){
	int i; //Iterators for for loops
	int j;
	int largest = A[0][0]; //Starts with first integer as largest
	for(i = 0; i < rowsize; i++){ //Loops through rows
		for(j = 0; j < colsize; j++){ //Loops through columns
			if(largest < A[i][j]){ //Checks if current number is larger than current largest
				largest = A[i][j]; //Exchanges if it is larger
			}
		}
	}
	return largest; //Returns largest integer
}



/*
FindColSum: Calculate the sum of a given column of a 2d array of size rowsize x colsize
Input: A 2d integer array, two unsigned integers for the row size and column size of that array, an unsigned int for which column to sum(colsize - 1 at most)
Output: Returns the sum of the chosen column 
*/
int FindColSum(int A[][COL], unsigned int rowsize, unsigned int colsize, unsigned int col_to_sum);
int FindColSum(int A[][COL], unsigned int rowsize, unsigned int colsize, unsigned int col_to_sum){
	int i; //Iterator for for loop
	int sum = 0; //Sum of the column

	for(i = 0; i < rowsize; i++){ //Cycles through all elements of specified columns
		sum += A[i][col_to_sum]; //Adds each entry to the sum
	}
	return sum; //Returns the calculated
}



/*
sort: Sorts a 1d array from smallest to largest using selection sort
Input: A positive integer order(the size of the array), and a 1d integer array
Output: Doesn't output, just edits an existing array
*/
void sort(unsigned int len, int A[]);
void sort(unsigned int len, int A[]){
	int i; //Iterators / index values
	int j;
	int k; //Minimum index value
	int temp; //Temp variable for swapping
	
	for(i = 0; i < len - 1; i++){ //Loops through first to 2nd last element
		k = i; //k starts at first element in current array		
		for(j = i + 1; j < len; j++){ //Cycles through remaining elements
			if(A[j] < A[k]){
				k = j; //Gives k the value of smallest element
			}
		}
		
		temp = A[i]; //Swaps element i with the lowest value element found, k
		A[i] = A[k];
		A[k] = temp;
	}
}



/*
Sort2DArray: Sort a 2d array of size colsize x rowsize in ascending order(order = 1) or descending order(order = 2)
Input: A 2d integer array, 2 unsigned integers for the row and column size of that array, an integer for order(only 1 or 2)
Output: Returns integer, 0 for success
*/
int Sort2DArray(int A[][COL], unsigned int rowsize, unsigned int colsize, int order);
int Sort2DArray(int A[][COL], unsigned int rowsize, unsigned int colsize, int order){
	int i; //Iterators for for loops
	int j;
	int oneD[rowsize * colsize]; //1d integer array for all values from passed 2d array
	int index = 0; //Current position in oneD
	for(i = 0; i < rowsize; i++){
		for(j = 0; j < colsize; j++){
			oneD[index] = A[i][j]; //Assigns every value of A to a 1d matrix
			index++; //Increments current index in oneD
		}
	}
	sort(rowsize * colsize, oneD); //Sorts 1d array

	if(order == 1){ //Case for ascending sort
		index = 0; //Resets index value
		for(i = 0; i < rowsize; i++){ 
			for(j = 0; j < colsize; j++){ 
				A[i][j] = oneD[index]; //Assigns array A to values from sorted oneD in ascending order
				index++; //Increments index value in oneD			
			}
		}
	}
	else{ //Case for descending sort
		index--; //Lowers index by one as previous for loop would put index out of range of oneD
		for(i = 0; i < rowsize; i++){ 
			for(j = 0; j < colsize; j++){ 
				A[i][j] = oneD[index]; //Assigns array A to values from sorted oneD in descending order
				index--; //Decrements index value in oneD
			}
		}
	}
	return 0; //Successful execution
}



/*
CopyArray2D: Copies the contents of array A into array B of the same size such that the contents of B are exactly the same as A
Input: Two 2d integer arrays of matching size, two unsigned integers for the row and column size of those arrays
Output: Returns integer, 0 for success
*/
int CopyArray2D(int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize);
int CopyArray2D(int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize){
	int i; //Iterators for for loops
	int j;
	
	for(i = 0; i < rowsize; i++){
		for(j = 0; j < colsize; j++){
			B[i][j] = A[i][j]; //Copies every value from A to B, preserving their position in the array
		}
	}
	return 0; //Successful execution
}



/*
CopyArray2DSpiral: Copies the contents of array A into array B of the same size such that the contents of B are the contents of A in sorted clockwise spiral order
Input: Two 2d integer arrays of matching size, two unsigned integers for the row and column size of those arrays
Output: Returns integer, 0 for success
*/
int CopyArray2DSpiral(int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize);
int CopyArray2DSpiral(int A[][COL], int B[][COL], unsigned int rowsize, unsigned int colsize){
	int i; //Iterators for for loops
	int j;
	int currRow = 0; //Start position for row looping
	int currCol = 0; //Start position for col looping
	int spiral[rowsize * colsize]; //A 1d array of all elements of A in sorted order
	int index = 0; //An index value

	for(i = 0; i < rowsize; i++){
		for(j = 0; j < colsize; j++){
			spiral[index] = A[i][j]; //Fills array with elements in sorted order
			index++;
		}
	}

	index = 0; //Resets index value for re-use


	while(currRow < rowsize && currCol < colsize){ //Will only run when the array is not depleted of values(row size has not been reached or col size has not been reached)
		//HORIZONTAL RIGHT FILLING	
		for(i = currCol; i < colsize; i++){ //From leftmost column of current array to rightmost column of current array
			B[currRow][i] = spiral[index]; //Copies elements from spiral onto horizontal component of B
			index++;
		}
		currRow++; //Shrinks array/matrix vertically(from top)
	

 
		//VERTICAL DOWN FILLING
		for(i = currRow; i < rowsize; i++){ //From lowest row of current array to highest row of current array
			B[i][colsize - 1] = spiral[index]; //Copies elements from spiral onto a vertical component of B
			index++;
		}
		colsize--; //Shrinks array/matrix horizontally(from right)



		//HORIZONTAL LEFT FILLING
		if(currRow < rowsize){ //Only executes if the lowest row in current array is less than the highest row(ie. wouldn't run if rows were depleted) 	
			for(i = colsize - 1; i >= currCol; i--){ //From leftmost column of current array to rightmost column of current array
				B[rowsize - 1][i] = spiral[index]; //Copies elements from spiral onto a horizontal component of B
				index++;
			}
			rowsize--; //Shrinks array/matrix vertically(from bottom)
		}



		//VERTICAL UP FILLING
		if(currCol < colsize){  //Only executes if the lowest column in current array is less than the highest column(ie. wouldn't run if columns were depleted)
			for(i = rowsize - 1; i >= currRow; i--){ //From lowest row of current array to highest row of current array
				B[i][currCol] = spiral[index]; //Copies elements from spiral onto a vertical component of B
				index++;
			}
			currCol++; //Shrinks array/matrix horizontally(from left)
		}

	}
	return 0; //Successful array execution
}


int main(){
	int array[ROW][COL]; //Declares an array of max size
	int arrayCopy[ROW][COL]; //Array for copying to later
	int arraySpiral[ROW][COL]; //Array for copying spiral sort to later
	unsigned int rowsize; //unsigned integers for row and column size
	unsigned int colsize;
	int min; //Declares minimum and maximum values for array population function
	int max;
	unsigned int col; //Column chosen to sum
	int order; //Order for sorting

	do{ //Gets a user entered row size and column size, ensures it's within bounds
		printf("Testing an array of size: ");
		scanf("%u x %u", &rowsize, &colsize);
	}
	while(rowsize > 20 || colsize > 20); //Has to be less than 20


	printf("Populate Array with unique random integers between "); //Gets a min and max value from user
	scanf("%d%d", &min, &max);


	PopulateArray2DUnique(array, rowsize, colsize, min, max); //Populates array with random numbers between min and max

	
	printf("DisplayArray2D: \n");
	DisplayArray2D(array, rowsize, colsize); //Displays the populated array


	printf("FindLargest: %d\n", FindLargest(array, rowsize, colsize)); //Finds and prints largest integer in array


	printf("Column to sum: "); //Gets which column user wants to sum
	scanf("%u", &col);

	
	printf("FindColSum of col %d: %d\n", col, FindColSum(array, rowsize, colsize, col)); //Calculates and prints column col


	printf("Enter order of sorting: "); //Gets order of sort from user
	scanf("%d", &order);	

	
	Sort2DArray(array, rowsize, colsize, order); //Sorts the 2d array
	printf("Sort2DArray order %d followed by DisplayArray2D: \n", order);
	DisplayArray2D(array, rowsize, colsize); //Displays the sorted array


	CopyArray2D(array, arrayCopy, rowsize, colsize); //Copies contents of array to arrayCopy
	printf("CopyArray2D from A to B, then Display B:\n");
	DisplayArray2D(arrayCopy, rowsize, colsize); //Prints the array copy 



	CopyArray2DSpiral(array, arraySpiral, rowsize, colsize); //Copies contents of array to a spiraled version
	printf("CopyArray2DSpiral from A to B, then Display B:\n");
	DisplayArray2D(arraySpiral, rowsize, colsize); //Prints the spiraled copy



	return 0;
}
]0;willavod@ltsp-amd64-alpha: ~/cs141/assignment1[01;32mwillavod@ltsp-amd64-alpha[00m:[01;34m~/cs141/assignment1[00m$ g[Kcc assign1.c
]0;willavod@ltsp-amd64-alpha: ~/cs141/assignment1[01;32mwillavod@ltsp-amd64-alpha[00m:[01;34m~/cs141/assignment1[00m$ ./a.out
Testing an array of size: 1 x 1
Populate Array with unique random integers between 3
3
DisplayArray2D: 
3 
FindLargest: 3
Column to sum: 0
FindColSum of col 0: 3
Enter order of sorting: 1
Sort2DArray order 1 followed by DisplayArray2D: 
3 
CopyArray2D from A to B, then Display B:
3 
CopyArray2DSpiral from A to B, then Display B:
3 
]0;willavod@ltsp-amd64-alpha: ~/cs141/assignment1[01;32mwillavod@ltsp-amd64-alpha[00m:[01;34m~/cs141/assignment1[00m$ ./a.out
Testing an array of size: 20 x 20
Populate Array with unique random integers between 100
999
DisplayArray2D: 
505 767 874 637 773 572 238 688 156 400 304 850 578 243 799 464 986 894 526 535 
546 152 170 456 107 611 382 390 479 842 965 884 610 839 522 383 411 712 971 519 
164 327 370 643 221 508 167 585 996 613 166 969 644 729 351 987 208 194 952 144 
756 791 618 139 254 331 162 726 395 389 938 863 269 997 372 388 583 420 901 220 
538 923 817 267 326 856 427 472 808 471 228 651 990 319 857 373 433 668 722 631 
659 586 800 656 910 188 239 142 412 820 117 281 343 137 466 768 897 837 948 600 
879 320 457 252 653 993 873 376 624 584 914 425 292 876 565 432 258 607 796 130 
129 169 920 115 424 667 908 176 562 890 694 917 119 210 732 636 594 942 244 124 
419 193 740 537 628 480 604 271 308 977 347 717 539 417 150 481 163 968 337 182 
230 718 724 963 735 180 527 126 760 630 713 853 921 106 690 598 569 741 979 684 
761 317 818 943 338 589 354 503 785 393 290 322 474 348 286 626 930 951 655 783 
661 935 615 311 557 408 291 241 560 960 798 549 204 104 568 498 295 924 913 190 
591 172 246 855 859 843 654 171 414 593 184 605 301 206 984 881 211 379 458 447 
355 371 590 465 662 579 212 570 123 413 273 765 288 410 486 916 625 263 122 285 
215 475 614 730 966 247 880 779 397 168 702 622 314 810 775 829 235 313 745 476 
105 947 701 256 877 975 416 118 927 438 754 573 967 216 386 496 988 146 747 298 
697 506 574 482 282 663 340 375 869 868 510 358 108 128 270 524 138 826 492 236 
972 460 883 158 402 368 919 983 113 259 359 934 179 665 445 437 321 491 330 467 
603 394 487 617 345 789 346 981 209 509 900 504 854 847 715 658 109 793 918 678 
759 976 112 521 478 691 507 959 404 844 738 181 531 811 621 788 692 325 716 145 
FindLargest: 997
Column to sum: 0
FindColSum of col 0: 10544
Enter order of sorting: 1 2 1
Sort2DArray order 1 followed by DisplayArray2D: 
104 105 106 107 108 109 112 113 115 117 118 119 122 123 124 126 128 129 130 137 
138 139 142 144 145 146 150 152 156 158 162 163 164 166 167 168 169 170 171 172 
176 179 180 181 182 184 188 190 193 194 204 206 208 209 210 211 212 215 216 220 
221 228 230 235 236 238 239 241 243 244 246 247 252 254 256 258 259 263 267 269 
270 271 273 281 282 285 286 288 290 291 292 295 298 301 304 308 311 313 314 317 
319 320 321 322 325 326 327 330 331 337 338 340 343 345 346 347 348 351 354 355 
358 359 368 370 371 372 373 375 376 379 382 383 386 388 389 390 393 394 395 397 
400 402 404 408 410 411 412 413 414 416 417 419 420 424 425 427 432 433 437 438 
445 447 456 457 458 460 464 465 466 467 471 472 474 475 476 478 479 480 481 482 
486 487 491 492 496 498 503 504 505 506 507 508 509 510 519 521 522 524 526 527 
531 535 537 538 539 546 549 557 560 562 565 568 569 570 572 573 574 578 579 583 
584 585 586 589 590 591 593 594 598 600 603 604 605 607 610 611 613 614 615 617 
618 621 622 624 625 626 628 630 631 636 637 643 644 651 653 654 655 656 658 659 
661 662 663 665 667 668 678 684 688 690 691 692 694 697 701 702 712 713 715 716 
717 718 722 724 726 729 730 732 735 738 740 741 745 747 754 756 759 760 761 765 
767 768 773 775 779 783 785 788 789 791 793 796 798 799 800 808 810 811 817 818 
820 826 829 837 839 842 843 844 847 850 853 854 855 856 857 859 863 868 869 873 
874 876 877 879 880 881 883 884 890 894 897 900 901 908 910 913 914 916 917 918 
919 920 921 923 924 927 930 934 935 938 942 943 947 948 951 952 959 960 963 965 
966 967 968 969 971 972 975 976 977 979 981 983 984 986 987 988 990 993 996 997 
CopyArray2D from A to B, then Display B:
104 105 106 107 108 109 112 113 115 117 118 119 122 123 124 126 128 129 130 137 
138 139 142 144 145 146 150 152 156 158 162 163 164 166 167 168 169 170 171 172 
176 179 180 181 182 184 188 190 193 194 204 206 208 209 210 211 212 215 216 220 
221 228 230 235 236 238 239 241 243 244 246 247 252 254 256 258 259 263 267 269 
270 271 273 281 282 285 286 288 290 291 292 295 298 301 304 308 311 313 314 317 
319 320 321 322 325 326 327 330 331 337 338 340 343 345 346 347 348 351 354 355 
358 359 368 370 371 372 373 375 376 379 382 383 386 388 389 390 393 394 395 397 
400 402 404 408 410 411 412 413 414 416 417 419 420 424 425 427 432 433 437 438 
445 447 456 457 458 460 464 465 466 467 471 472 474 475 476 478 479 480 481 482 
486 487 491 492 496 498 503 504 505 506 507 508 509 510 519 521 522 524 526 527 
531 535 537 538 539 546 549 557 560 562 565 568 569 570 572 573 574 578 579 583 
584 585 586 589 590 591 593 594 598 600 603 604 605 607 610 611 613 614 615 617 
618 621 622 624 625 626 628 630 631 636 637 643 644 651 653 654 655 656 658 659 
661 662 663 665 667 668 678 684 688 690 691 692 694 697 701 702 712 713 715 716 
717 718 722 724 726 729 730 732 735 738 740 741 745 747 754 756 759 760 761 765 
767 768 773 775 779 783 785 788 789 791 793 796 798 799 800 808 810 811 817 818 
820 826 829 837 839 842 843 844 847 850 853 854 855 856 857 859 863 868 869 873 
874 876 877 879 880 881 883 884 890 894 897 900 901 908 910 913 914 916 917 918 
919 920 921 923 924 927 930 934 935 938 942 943 947 948 951 952 959 960 963 965 
966 967 968 969 971 972 975 976 977 979 981 983 984 986 987 988 990 993 996 997 
CopyArray2DSpiral from A to B, then Display B:
104 105 106 107 108 109 112 113 115 117 118 119 122 123 124 126 128 129 130 137 
258 259 263 267 269 270 271 273 281 282 285 286 288 290 291 292 295 298 301 138 
256 408 410 411 412 413 414 416 417 419 420 424 425 427 432 433 437 438 304 139 
254 404 538 539 546 549 557 560 562 565 568 569 570 572 573 574 578 445 308 142 
252 402 537 654 655 656 658 659 661 662 663 665 667 668 678 684 579 447 311 144 
247 400 535 653 765 767 768 773 775 779 783 785 788 789 791 688 583 456 313 145 
246 397 531 651 761 859 863 868 869 873 874 876 877 879 793 690 584 457 314 146 
244 395 527 644 760 857 923 924 927 930 934 935 938 880 796 691 585 458 317 150 
243 394 526 643 759 856 921 969 971 972 975 976 942 881 798 692 586 460 319 152 
241 393 524 637 756 855 920 968 988 990 993 977 943 883 799 694 589 464 320 156 
239 390 522 636 754 854 919 967 987 997 996 979 947 884 800 697 590 465 321 158 
238 389 521 631 747 853 918 966 986 984 983 981 948 890 808 701 591 466 322 162 
236 388 519 630 745 850 917 965 963 960 959 952 951 894 810 702 593 467 325 163 
235 386 510 628 741 847 916 914 913 910 908 901 900 897 811 712 594 471 326 164 
230 383 509 626 740 844 843 842 839 837 829 826 820 818 817 713 598 472 327 166 
228 382 508 625 738 735 732 730 729 726 724 722 718 717 716 715 600 474 330 167 
221 379 507 624 622 621 618 617 615 614 613 611 610 607 605 604 603 475 331 168 
220 376 506 505 504 503 498 496 492 491 487 486 482 481 480 479 478 476 337 169 
216 375 373 372 371 370 368 359 358 355 354 351 348 347 346 345 343 340 338 170 
215 212 211 210 209 208 206 204 194 193 190 188 184 182 181 180 179 176 172 171 
]0;willavod@ltsp-amd64-alpha: ~/cs141/assignment1[01;32mwillavod@ltsp-amd64-alpha[00m:[01;34m~/cs141/assignment1[00m$ ./a.out
Testing an array of size: 10 x 5
Populate Array with unique random integers between 10
99
DisplayArray2D: 
39 69 22 46 67 
26 13 62 84 48 
88 76 29 66 54 
98 31 83 32 85 
65 94 38 93 19 
10 44 20 11 37 
73 49 33 16 77 
35 27 60 70 25 
21 24 79 51 53 
81 78 99 41 91 
FindLargest: 99
Column to sum: 3
FindColSum of col 3: 510
Enter order of sorting: 1
Sort2DArray order 1 followed by DisplayArray2D: 
10 11 13 16 19 
20 21 22 24 25 
26 27 29 31 32 
33 35 37 38 39 
41 44 46 48 49 
51 53 54 60 62 
65 66 67 69 70 
73 76 77 78 79 
81 83 84 85 88 
91 93 94 98 99 
CopyArray2D from A to B, then Display B:
10 11 13 16 19 
20 21 22 24 25 
26 27 29 31 32 
33 35 37 38 39 
41 44 46 48 49 
51 53 54 60 62 
65 66 67 69 70 
73 76 77 78 79 
81 83 84 85 88 
91 93 94 98 99 
CopyArray2DSpiral from A to B, then Display B:
10 11 13 16 19 
51 53 54 60 20 
49 85 88 62 21 
48 84 91 65 22 
46 83 93 66 24 
44 81 94 67 25 
41 79 98 69 26 
39 78 99 70 27 
38 77 76 73 29 
37 35 33 32 31 
]0;willavod@ltsp-amd64-alpha: ~/cs141/assignment1[01;32mwillavod@ltsp-amd64-alpha[00m:[01;34m~/cs141/assignment1[00m$ exit
exit

Script done on Wed 06 Feb 2019 04:26:01 PM EST
